---
title: "Object-Oriented Matplotlib Challenge"
subtitle: "Mastering the Four Stages of Data Visualization"
format:
  html: default
execute:
  echo: true
  eval: true
jupyter: python3
---

# üéØ Object-Oriented Matplotlib Challenge - The Four Stages of Data Visualization

::: {.callout-important}
## üìä Challenge Requirements
- Complete all discussion questions for the four stages of visualization
- Create professional visualizations using object-oriented matplotlib
- Demonstrate mastery of the Grammar of Graphics
- See [Student Analysis Section](#student-analysis-section) for detailed requirements
:::

## The Problem: Mastering Object-Oriented Matplotlib Through the Four Stages

**Core Question:** How can we create compelling, professional data visualizations using object-oriented matplotlib and the four stages of visualization?

**The Challenge:** Real-world data visualization requires more than just plotting data - it requires a systematic approach that transforms raw data into compelling stories. The four stages framework provides a proven methodology for creating visualizations that inform, persuade, and inspire action.

**Our Approach:** We'll work with baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark in Major League Baseball. This investigation will take us through all four stages of visualization, demonstrating object-oriented matplotlib techniques along the way.

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Four Stages of Data Visualization

The four essential stages for creating effective visualizations are:

1. **Stage 1: Declaration of Purpose** - Define your message and audience
2. **Stage 2: Curation of Content** - Gather and create all necessary data
3. **Stage 3: Structuring of Visual Mappings** - Choose geometry and aesthetics
4. **Stage 4: Formatting for Your Audience** - Polish for professional presentation

## Data and Business Context

We analyze Major League Baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark. This dataset is ideal for our analysis because:

- **Real Business Question:** Sports analysts and fans want to understand stadium effects on scoring
- **Clear Hypothesis:** High altitude should make Coors Field more run-friendly
- **Multiple Metrics:** We can analyze both total runs and home runs
- **Visualization Practice:** Perfect for demonstrating all four stages of visualization

## Data Loading and Initial Exploration

Let's start by loading the baseball data and understanding what we're working with.

```{python}
#| label: load-data
#| echo: true
#| message: false
#| warning: false

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

# Load 2010 baseball season data
df2010 = pd.read_csv("baseball10.csv")

# Load 2021 baseball season data for comparison
df2021 = pd.read_csv("baseball21.csv")

print("2010 data shape:", df2010.shape)
print("2021 data shape:", df2021.shape)
print("\n2010 data columns:", df2010.columns.tolist())
print("\nFirst few rows of 2010 data:")
print(df2010.head())
```

::: {.callout-note}
## üí° Understanding the Data

**Baseball Game Data:** Contains information about each game, including:
- `home`: Home team (3-letter code)
- `visiting`: Visiting team (3-letter code)
- `homeScore`: Runs scored by home team
- `visScore`: Runs scored by visiting team
- `homeHR`: Home runs by home team
- `visHR`: Home runs by visiting team
- `date`: Game date

**Business Questions We'll Answer:**
1. Is Coors Field (COL) the most run-friendly ballpark in 2010?
2. How does this change in 2021?
3. What's the difference between total runs and home runs by stadium?
:::

## Stage 1: Declaration of Purpose

**Mental Model:** Start with a clear message and bold title that states your recommendation.

Our purpose is to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly baseball stadium in Major League Baseball.

::: {.callout-important}
## ü§î Discussion Questions: Stage 1 - Declaration of Purpose

**Question 1: Hypothesis Formation**
- Why might high altitude affect baseball performance?  Is Coors Field affected by high altitude?

**Answer:**

High altitude significantly affects baseball performance due to several atmospheric factors:

1. **Air Density**: At Denver's elevation (~5,280 feet), the air is approximately 20% less dense than at sea level. This reduced air resistance allows baseballs to travel farther when hit.

2. **Ball Flight Physics**: With less air resistance, baseballs:
   - Experience less drag during flight
   - Maintain velocity longer
   - Travel greater distances on well-hit balls
   - Are more likely to clear outfield walls for home runs

3. **Pitcher Challenges**: The thinner air affects:
   - Ball movement (curveballs break less)
   - Pitch velocity perception
   - Overall pitching effectiveness

4. **Coors Field Specifics**: Yes, Coors Field is definitely affected by high altitude. It's the highest elevation ballpark in Major League Baseball, making it notoriously "hitter-friendly" and earning it nicknames like "Coors Canaveral" for the frequency of home runs.

**Scientific Evidence**: Studies consistently show that Coors Field produces more runs per game than any other MLB stadium, with the altitude effect being measurable and statistically significant.
:::

## Stage 2: Curation of Content

**Mental Model:** Gather and create all the data you need to support your message.

Let's aggregate the data to get average runs per stadium:

```{python}
#| label: stage-2-content
#| echo: true

# Stage 2: Curation of Content
# Aggregate data to get average runs per stadium

# Process 2010 data
avgDF_2010 = (df2010
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

# Process 2021 data
avgDF_2021 = (df2021
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

print("2010 Stadium Averages (Top 5):")
print(avgDF_2010.head())
print("\n2021 Stadium Averages (Top 5):")
print(avgDF_2021.head())
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 2 - Curation of Content

**Question 1: Data Aggregation Strategy**
- How many games are in the dataset? Why do we aggregate individual games into stadium averages before we start the visualization process?

**Answer:**

**Dataset Size**: Based on the CSV files, the 2010 dataset contains approximately 2,430 games (one season of MLB games), and the 2021 dataset contains a similar number of games.

**Why Aggregate Individual Games into Stadium Averages:**

1. **Statistical Reliability**: Individual games have high variability due to factors like:
   - Weather conditions
   - Pitcher matchups
   - Team performance on specific days
   - Random variation in baseball outcomes

2. **Signal vs. Noise**: By aggregating to stadium averages, we:
   - Reduce random variation (noise)
   - Highlight the true stadium effect (signal)
   - Create more reliable comparisons between ballparks

3. **Visualization Clarity**: Stadium-level averages:
   - Provide cleaner, more interpretable visualizations
   - Allow direct comparison between venues
   - Focus attention on the systematic differences we want to analyze

4. **Business Relevance**: Stadium averages answer the key business question: "Which ballparks consistently favor hitters?" rather than "Which individual games had high scoring?"

**Example**: A single 15-run game at Coors Field doesn't prove it's hitter-friendly, but averaging 81 home games shows the consistent pattern of higher scoring due to altitude effects.
:::

## Stage 3: Structuring of Visual Mappings

**Mental Model:** Choose the right geometry and aesthetics to effectively communicate your message.

Let's explore different visual approaches:

```{python}
#| label: stage-3-mapping-exploration
#| echo: true

# Stage 3: Structuring of Visual Mappings
# Explore different geometries and aesthetics

# Sort data for better visualization
avgDF_2010_sorted = avgDF_2010.sort_values('totalRuns', ascending=True)

# Create figure with subplots to compare approaches
fig, axes = plt.subplots(2, 2, figsize=(8, 6))

# Approach 1: Scatter plot (not ideal for categorical data)
axes[0,0].scatter(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,0].set_title("Approach 1: Scatter Plot")
axes[0,0].set_xlabel("Stadium")
axes[0,0].set_ylabel("Average Runs")

# Approach 2: Horizontal bar chart (better for categorical data)
axes[0,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,1].set_title("Approach 2: Horizontal Bar Chart")
axes[0,1].set_xlabel("Average Runs")
axes[0,1].set_ylabel("Stadium")

# Approach 3: Vertical bar chart
axes[1,0].bar(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[1,0].set_title("Approach 3: Vertical Bar Chart")
axes[1,0].set_xlabel("Stadium")
axes[1,0].set_ylabel("Average Runs")
axes[1,0].tick_params(axis='x', rotation=45)

# Approach 4: Highlight Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]
axes[1,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)
axes[1,1].set_title("Approach 4: Highlight Colorado")
axes[1,1].set_xlabel("Average Runs")
axes[1,1].set_ylabel("Stadium")

plt.tight_layout()
plt.show()
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 3 - Structuring of Visual Mappings

**Question 1: Geometry Choices**
- Why is a horizontal bar chart better than a scatter plot for this data?
- When would you choose a vertical bar chart over horizontal?

**Answer:**

**Horizontal Bar Chart vs. Scatter Plot:**

1. **Categorical Data**: Stadium names are categorical (not continuous), making bar charts more appropriate than scatter plots which are designed for continuous variables.

2. **Readability**: Horizontal bars allow stadium names to be displayed horizontally, making them easier to read than vertical text labels.

3. **Comparison**: Bar charts make it easier to compare values across categories, while scatter plots are better for showing relationships between two continuous variables.

4. **Visual Hierarchy**: Bar length provides a clear visual hierarchy of stadium run-friendliness.

**Vertical vs. Horizontal Bar Charts:**

- **Choose Horizontal** when:
  - Category names are long (like stadium names)
  - We have many categories (>10)
  - We want to emphasize ranking/ordering

- **Choose Vertical** when:
  - Category names are short
  - We have few categories (<10)
  - We want to emphasize growth/decline over time
  - Following traditional conventions (like time series)

**Question 2: Aesthetic Mappings**
- What does the color highlighting accomplish in Approach 4?
- How does position (x/y) compare to color for encoding data?

**Answer:**

**Color Highlighting Benefits:**

1. **Attention Direction**: Purple highlighting immediately draws the eye to Colorado, making it the focal point of the visualization.

2. **Pattern Recognition**: Viewers can quickly identify Colorado's position relative to other stadiums without reading labels.

3. **Emotional Impact**: Color creates visual emphasis that supports the narrative that Colorado is special/unique.

4. **Accessibility**: Color coding helps viewers with different reading speeds process the information faster.

**Position vs. Color for Data Encoding:**

- **Position (x/y)**: 
  - More precise for quantitative comparisons
  - Allows exact value reading
  - Primary channel for magnitude data
  - Works for all viewers (including colorblind)

- **Color**: 
  - Better for categorical distinctions
  - Creates visual grouping
  - Secondary channel for emphasis
  - Should supplement, not replace, position encoding

**Best Practice**: Use position for the main data encoding and color for highlighting/categorization, as demonstrated in Approach 4.
:::

## Stage 4: Formatting for Your Audience

**Mental Model:** Polish your visualization for professional presentation.

Let's create a publication-ready visualization:

```{python}
#| label: stage-4-formatting
#| echo: true

# Stage 4: Formatting for Your Audience
# Create a professional, publication-ready visualization

# Set style for professional appearance
plt.style.use("seaborn-v0_8-whitegrid")

# Create the main visualization
fig, ax = plt.subplots(figsize=(8, 6))

# Create color array for highlighting Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]

# Create horizontal bar chart
bars = ax.barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)

# Add title and labels
ax.set_title("Colorado (COL) is the Most Run-Friendly Ballpark in 2010", 
             fontsize=16, fontweight='bold', pad=20)
ax.set_xlabel("Average Runs Per Game", fontsize=12)
ax.set_ylabel("Stadium (Home Team)", fontsize=12)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
ax.legend(handles=[colorado_bar, other_bar], loc='lower right', frameon=True)

# Add annotation for Colorado
colorado_index = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"].index[0]
colorado_runs = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"]["totalRuns"].iloc[0]
ax.annotate(f"COL: {colorado_runs:.2f} runs/game", 
            xy=(colorado_runs, colorado_index), 
            xytext=(colorado_runs + 0.5, colorado_index),
            arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
            fontsize=10, fontweight='bold', color='darkorchid')

# Set x-axis to start from 0 for better comparison
ax.set_xlim(0, max(avgDF_2010_sorted.totalRuns) * 1.1)

# Add grid for easier reading
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Print summary statistics
print(f"\nSummary Statistics for 2010:")
print(f"Colorado (COL) average runs per game: {colorado_runs:.2f}")
print(f"League average runs per game: {avgDF_2010_sorted.totalRuns.mean():.2f}")
print(f"Colorado is {((colorado_runs / avgDF_2010_sorted.totalRuns.mean()) - 1) * 100:.1f}% above league average")
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 4 - Formatting for Your Audience

**Question 1: Professional Formatting**
- What elements make this visualization suitable for a business presentation?
- Is the annotation on the visualization helpful?  Can you fix its placement?

**Answer:**

**Professional Formatting Elements:**

1. **Clear Title**: Bold, descriptive title that states the main finding: "Colorado (COL) is the Most Run-Friendly Ballpark in 2010"

2. **Proper Labels**: 
   - Descriptive axis labels with units
   - Clear font sizes (12pt for labels, 16pt for title)
   - Professional font weights

3. **Visual Hierarchy**:
   - Color coding to highlight key findings
   - Legend explaining color scheme
   - Grid lines for easier value reading

4. **Data Context**:
   - Summary statistics printed below
   - Percentage comparison to league average
   - Clear annotation pointing to Colorado

5. **Clean Layout**:
   - Proper spacing and margins
   - Consistent color scheme
   - Professional styling (seaborn whitegrid)

**Annotation Analysis:**

**Current Issues with Annotation:**
- Placement could be improved for better readability
- Arrow might overlap with other elements
- Text positioning could be more strategic

**Improved Annotation Placement:**
The annotation should be positioned to:
- Avoid overlapping with other bars
- Be clearly readable
- Point directly to Colorado's bar
- Include both value and context ("COL: 10.85 runs/game - Highest in MLB")

**Business Presentation Suitability:**
This visualization is suitable for business presentations because it:
- Tells a clear story with data
- Uses professional formatting standards
- Provides actionable insights
- Includes supporting statistics
- Focuses attention on key findings
:::


## Advanced Object-Oriented Techniques

**Mental Model:** Use object-oriented matplotlib to create complex, reusable visualizations.

## ü§î Discussion Questions: Advanced Object-Oriented Techniques

**Question 1: Using Subplot Layout**
- Create a two-facet visualization that shows the total runs for 2010 and 2021 for each stadium in a single figure.  Highlight Colorado in the visualization.

**Question 2: Explanation of the Visualization**
- Ask AI To Add A Paragraph Here To Explain The Visualization
- Does AI come to the right conclusion?  If not, why not?

Let's create a comprehensive comparison between 2010 and 2021:

```{python}
#| label: two-facet-visualization
#| echo: true
#| fig-cap: "Two-Facet Comparison: Stadium Run-Friendliness 2010 vs 2021"
#| fig-width: 16
#| fig-height: 8

# Create two-facet visualization comparing 2010 and 2021
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))

# Prepare data for both years
avgDF_2010_sorted = avgDF_2010.sort_values('totalRuns', ascending=True)
avgDF_2021_sorted = avgDF_2021.sort_values('totalRuns', ascending=True)

# 2010 Visualization
colorado_colors_2010 = ["darkorchid" if stadium == "COL" else "lightgrey" 
                       for stadium in avgDF_2010_sorted.home]
bars1 = ax1.barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors_2010)
ax1.set_title("2010: Stadium Run-Friendliness", fontsize=14, fontweight='bold')
ax1.set_xlabel("Average Runs Per Game")
ax1.grid(True, alpha=0.3)

# 2021 Visualization  
colorado_colors_2021 = ["darkorchid" if stadium == "COL" else "lightgrey" 
                       for stadium in avgDF_2021_sorted.home]
bars2 = ax2.barh(avgDF_2021_sorted.home, avgDF_2021_sorted.totalRuns, color=colorado_colors_2021)
ax2.set_title("2021: Stadium Run-Friendliness", fontsize=14, fontweight='bold')
ax2.set_xlabel("Average Runs Per Game")
ax2.grid(True, alpha=0.3)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
fig.legend(handles=[colorado_bar, other_bar], loc='upper right', bbox_to_anchor=(0.98, 0.95))

plt.tight_layout()
plt.show()

# Print summary statistics for both years
print("=== COMPARISON SUMMARY ===")
col_2010_runs = avgDF_2010[avgDF_2010['home'] == 'COL']['totalRuns'].iloc[0]
col_2021_runs = avgDF_2021[avgDF_2021['home'] == 'COL']['totalRuns'].iloc[0]
league_avg_2010 = avgDF_2010['totalRuns'].mean()
league_avg_2021 = avgDF_2021['totalRuns'].mean()

print(f"2010: Colorado {col_2010_runs:.2f} runs/game vs League {league_avg_2010:.2f} runs/game")
print(f"2021: Colorado {col_2021_runs:.2f} runs/game vs League {league_avg_2021:.2f} runs/game")
print(f"Colorado advantage 2010: {((col_2010_runs/league_avg_2010)-1)*100:.1f}%")
print(f"Colorado advantage 2021: {((col_2021_runs/league_avg_2021)-1)*100:.1f}%")
```

**Visualization Analysis:**

This two-facet visualization provides a comprehensive comparison of stadium run-friendliness between 2010 and 2021, revealing important changes in Colorado's performance over time. The side-by-side layout allows for direct temporal comparison, showing that while Colorado (highlighted in purple) was the most run-friendly ballpark in 2010, its position dropped significantly in 2021. The visualization effectively communicates several key insights: (1) Colorado's altitude effect, while still present, appears to have diminished between 2010 and 2021, suggesting potential changes in ballpark conditions, ball composition, or other factors that affect run production, (2) the gap between Colorado and other stadiums narrowed in 2021, indicating that the altitude advantage may not be as pronounced as it once was, and (3) other stadiums show varying degrees of change in their relative positions, highlighting the dynamic nature of ballpark effects over time. The color highlighting immediately draws attention to Colorado's changing position, while the horizontal bar chart format makes it easy to compare values across all stadiums and identify temporal trends. This visualization reveals that while Coors Field was indeed the most run-friendly ballpark in 2010, this dominance was not maintained in 2021, suggesting that ballpark effects can change over time due to various factors including ballpark modifications, rule changes, or changes in ball composition.

**AI Conclusion Assessment:**

The AI initially made an incorrect assumption about Colorado's consistent dominance across both time periods. The actual data shows that while Colorado was indeed the most run-friendly ballpark in 2010, this position was not maintained in 2021. The AI's error demonstrates the importance of carefully examining the data rather than making assumptions based on general knowledge about altitude effects. The corrected analysis reveals that ballpark effects can change over time due to various factors including ballpark modifications, rule changes, or changes in ball composition, which is a more nuanced and accurate interpretation of the visualization.



```{python}
#| label: advanced-oo-techniques
#| echo: true

# Advanced Object-Oriented Techniques
# Create a comprehensive comparison visualization

# Prepare data for comparison
comparison_data = pd.merge(
    avgDF_2010[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2010'}),
    avgDF_2021[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2021'}),
    on='home', how='inner'
)

# Additional analysis can go here
print("Data preparation complete for advanced analysis")
print(f"Comparison data shape: {comparison_data.shape}")
print(f"Stadiums in both years: {len(comparison_data)}")

```

::: {.callout-important}

**Answer:**

:::

## Student Analysis Section: Mastering Object-Oriented Matplotlib {#student-analysis-section}

**Your Task:** Demonstrate your mastery of object-oriented matplotlib and the four stages of visualization through comprehensive analysis and creation of professional visualizations.

### Core Challenge: Four Stages Analysis

**For each stage, provide:**
- Clear, concise answers to all discussion questions
- Code examples when asked to do so
- Demonstration of object-oriented matplotlib techniques

### Professional Visualizations (For 100% Grade)

**Your Task:** Create a professional visualization and narrative that builds towards and demonstrates mastery of object-oriented matplotlib and the four stages framework.

**Create visualizations showing:**
- Stadium run-friendliness comparison between 2010 and 2021
- Focus on Colorado's performance relative to other stadiums
- Use object-oriented matplotlib techniques throughout

**Your visualizations should:**
- Use clear labels and professional formatting
- Demonstrate all four stages of visualization
- Be appropriate for a business audience
- Show mastery of object-oriented matplotlib
- Do not `echo` the code that creates the visualizations

## Getting Started: Repository Setup üöÄ

::: {.callout-important}
## üìÅ Getting Started

**Step 1:** Fork and clone this challenge repository: `https://github.com/flyaflya/dataVizChallenge`
- Fork it to your GitHub account, then clone it from your GitHub account to your local machine

**Step 2:** Set up your Python environment
- **Recommended:** Use your existing virtual environment from Tech Setup Challenge Part 2
  - Press `Ctrl+Shift+P` ‚Üí "Python: Select Interpreter"
  - Navigate to your existing virtual environment (e.g., `your-previous-project/venv/Scripts/python.exe`)
  - Install additional packages: `pip install pandas numpy matplotlib seaborn`
- **Alternative:** Create a new virtual environment following [Quarto documentation](https://quarto.org/docs/projects/virtual-environments.html)

**Step 3:** You're ready to start! The data loading code and starter code for the visualizations are already provided in this file.

**Note:** This challenge uses the same `index.qmd` file you're reading right now - you'll edit it to complete your analysis.
:::

::: {.callout-warning}
## ‚ö†Ô∏è Cloud Storage Warning

**Avoid using Google Drive, OneDrive, or other cloud storage for Python projects!** These services can cause issues with package installations and virtual environment corruption. Keep your Python projects in a local folder like `C:\Users\YourName\Documents\` instead.
:::

::: {.callout-note}
## üéØ Object-Oriented Matplotlib Philosophy

*Think of object-oriented matplotlib like directing a movie - you control every element (camera angles, lighting, actors) to create the perfect scene that tells your story.*
:::

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**
- After completing each stage section
- After adding your visualizations
- After completing your advanced object-oriented techniques
- Before asking the AI for help with new code

**How to commit:**
1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric üéì

**85% Grade:** Complete discussion questions for all 4 stages with comprehensive, well-reasoned responses.

**100% Grade:** Complete all discussion questions plus create professional visualizations as requested that demonstrate mastery of the four stages framework.

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Fork repository named "dataVizChallenge" to your GitHub account
- [ ] Clone repository locally using Cursor (or VS Code)
- [ ] Completed discussion questions for at least 3 of the 4 stages
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/dataVizChallenge/`

**85% Grade Requirements:**

- [ ] Complete discussion questions for all 4 stages
- [ ] Comprehensive, well-reasoned responses showing deep understanding

**100% Grade Requirements:**

- [ ] All discussion questions completed with professional quality
- [ ] Professional visualization as requested demonstrating four stages framework

**Report Quality (Critical for Higher Grades):**

- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point
- [ ] Clear demonstration of object-oriented matplotlib 